2012/04/03
CREATE TABLE usuario_permisossucursal (
  usuario_id integer NOT NULL,
  sucursales_id integer NOT NULL,
  CONSTRAINT usuario_permisossucursal_pkey PRIMARY KEY (usuario_id, sucursales_id),
  CONSTRAINT fk_usuario_permisossucursal_sucursales_id FOREIGN KEY (sucursales_id)
      REFERENCES permisossucursal (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_usuario_permisossucursal_usuario_id FOREIGN KEY (usuario_id)
      REFERENCES usuario (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (  OIDS=FALSE);

ALTER TABLE presupuesto ADD COLUMN numero numeric(8,0);
update presupuesto set numero = id;
ALTER TABLE presupuesto add unique (numero, sucursal);
ALTER TABLE recibo ADD COLUMN numero numeric(8,0);
update recibo set numero = cast(substring(id || '' from 2) as integer);
CREATE SEQUENCE recibo_id_seq
   INCREMENT 1
   START 1
   MINVALUE 1
   MAXVALUE 99999999
   CACHE 1;
ALTER TABLE recibo add unique (numero, sucursal);
ALTER TABLE recibo ALTER id TYPE integer;
ALTER TABLE recibo ALTER COLUMN id SET DEFAULT nextval('recibo_id_seq');
2011/11/21
//-- nueva estructura de mensajes informativos del sistema
DROP TABLE msj_informativos;
CREATE TABLE msj_informativos
(
  id integer NOT NULL,
  message text NOT NULL,
  code character varying(500) NOT NULL,
  CONSTRAINT msj_informativos_pkey PRIMARY KEY (id),
  CONSTRAINT msj_informativos_code_key UNIQUE (code)
)
WITH (
  OIDS=FALSE
);

2011/09/03
    ALTER TABLE ADD COLUMN acreditado boolean NOT NULL DEFAULT false
2011/08/30
//DB CREATE TABLE's cheque_estado, librado, banco, banco_sucursal, cheque_propio, cheque_tercero
CREATE TABLE cheque_estado
(
  id integer NOT NULL,
  nombre character varying(20) NOT NULL,
  CONSTRAINT cheque_estado_pkey PRIMARY KEY (id),
  CONSTRAINT cheque_estado_nombre_key UNIQUE (nombre)
)
WITH (
  OIDS=FALSE
);
CREATE TABLE librado
(
  id integer NOT NULL,
  nombre character varying(30) NOT NULL,
  CONSTRAINT librado_pkey PRIMARY KEY (id),
  CONSTRAINT librado_nombre_key UNIQUE (nombre)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE librado OWNER TO postgres;
COMMENT ON TABLE librado IS 'Se refiera a la forma/situación/estado que se encuentra el cheque';

CREATE TABLE banco
(
  id serial NOT NULL,
  nombre character varying(100) NOT NULL,
  version_banco bigint,
  CONSTRAINT banco_pkey PRIMARY KEY (id),
  CONSTRAINT banco_nombre_key UNIQUE (nombre)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE banco OWNER TO postgres;
COMMENT ON TABLE banco IS 'Bancos, los cuales poseén sucursales (tabla banco_sucursal)';

CREATE TABLE banco_sucursal
(
  id serial NOT NULL,
  nombre character varying(200) NOT NULL,
  codigo character varying(20),
  direccion character varying(200) NOT NULL,
  telefono numeric(12,0),
  banco integer NOT NULL,
  CONSTRAINT banco_sucursal_pkey PRIMARY KEY (id),
  CONSTRAINT banco_sucursal_banco_fkey FOREIGN KEY (banco)
      REFERENCES banco (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT banco_sucursal_nombre_key UNIQUE (nombre, banco)
)
WITH (
  OIDS=FALSE
);

CREATE TABLE cheque_propio
(
  id serial NOT NULL,
  numero numeric(20,0) NOT NULL,
  fecha_cheque date NOT NULL,
  banco integer NOT NULL,
  banco_sucursal integer NOT NULL,
  cruzado boolean NOT NULL DEFAULT false,
  observacion character varying(300),
  estado integer NOT NULL,
  fecha_creacion timestamp with time zone NOT NULL DEFAULT now(),
  fecha_cobro date,
  usuario integer NOT NULL,
  endosatario character varying(200),
  fecha_endoso date,
  librado integer NOT NULL,
  importe numeric(9,2) NOT NULL,
  proveedor integer NOT NULL,
  version_cheque bigint,
  bound integer NOT NULL, -- 1=factura_compra, 3 =remesa
  bound_id integer,
  CONSTRAINT cheque_propio_pkey PRIMARY KEY (id),
  CONSTRAINT cheque_propio_banco_fkey FOREIGN KEY (banco)
      REFERENCES banco (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_propio_banco_sucursal_fkey FOREIGN KEY (banco_sucursal)
      REFERENCES banco_sucursal (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_propio_librado_fkey FOREIGN KEY (librado)
      REFERENCES librado (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_propio_proveedor_fkey FOREIGN KEY (proveedor)
      REFERENCES proveedor (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_propio_usuario_fkey FOREIGN KEY (usuario)
      REFERENCES usuario (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_propio_numero_key UNIQUE (numero)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE cheque_propio OWNER TO postgres;
COMMENT ON COLUMN cheque_propio.bound IS '1=factura_compra, 3 =remesa';

CREATE TABLE cheque_terceros
(
  id serial NOT NULL,
  numero numeric(20,0) NOT NULL,
  fecha_cheque date NOT NULL,
  banco integer NOT NULL,
  banco_sucursal integer NOT NULL,
  cruzado boolean NOT NULL DEFAULT false,
  observacion character varying(300),
  estado integer NOT NULL,
  fecha_creacion timestamp with time zone NOT NULL DEFAULT now(),
  fecha_cobro date,
  usuario integer NOT NULL,
  endosatario character varying(200),
  fecha_endoso date,
  librado integer NOT NULL,
  importe numeric(9,2) NOT NULL,
  cliente integer NOT NULL,
  version_cheque bigint,
  bound integer NOT NULL, -- 2=factura_venta, 4=recibo
  bound_id integer,
  CONSTRAINT cheque_terceros_pkey PRIMARY KEY (id),
  CONSTRAINT cheque_terceros_banco_fkey FOREIGN KEY (banco)
      REFERENCES banco (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_terceros_banco_sucursal_fkey FOREIGN KEY (banco_sucursal)
      REFERENCES banco_sucursal (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_terceros_cliente_fkey FOREIGN KEY (cliente)
      REFERENCES cliente (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_terceros_librado_fkey FOREIGN KEY (librado)
      REFERENCES librado (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_terceros_usuario_fkey FOREIGN KEY (usuario)
      REFERENCES usuario (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT cheque_terceros_cliente_key UNIQUE (cliente, numero)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE cheque_terceros OWNER TO postgres;
COMMENT ON COLUMN cheque_terceros.bound IS '2=factura_venta, 4=recibo';

2011/08/23
//DB
    ALTER TABLE detalle_acreditacion ADD COLUMN anulado boolean NOT NULL DEFAULT false;
2011/08/08
Se agregó facturación electrónica
//DB
    CREATE TABLE documento_tipo
    (
      id serial NOT NULL,
      nombre character varying(50),
      CONSTRAINT documento_tipo_pkey PRIMARY KEY (id),
      CONSTRAINT unq_documento_tipo_0 UNIQUE (nombre)
    )
    WITH (
      OIDS=FALSE
    );
    ALTER TABLE documento_tipo OWNER TO postgres;

    CREATE TABLE factura_electronica
    (
      id serial NOT NULL,
      fecha_proceso character varying(14) NOT NULL,
      resultado character varying(1) NOT NULL,
      concepto integer NOT NULL,
      cbte_tipo integer NOT NULL, -- según AFIP: Facturas: 1= "A", 6= "B", 11= "C"
      cbte_numero integer NOT NULL,
      cae character varying(14),
      cae_fecha_vto date,
      observaciones text, -- eventos relacionados a la obtención del CAE
      fecha_serv_desde date,
      fecha_serv_hasta date,
      CONSTRAINT factura_electronica_pkey PRIMARY KEY (id),
      CONSTRAINT factura_electronica_cbte_numero_key UNIQUE (cbte_numero),
      CONSTRAINT unq_factura_electronica_0 UNIQUE (cbte_numero)
    )
    WITH (
      OIDS=FALSE
    );
    ALTER TABLE factura_electronica OWNER TO postgres;
    COMMENT ON TABLE factura_electronica IS 'Datos relacionados a la facturación electrónica de la AFIP.';
    COMMENT ON COLUMN factura_electronica.cbte_tipo IS 'según AFIP: Facturas: 1= "A", 6= "B", 11= "C"';
    COMMENT ON COLUMN factura_electronica.observaciones IS 'eventos relacionados a la obtención del CAE';

2011/04/27
//DB
    CREATE TABLE movimiento_concepto (
      id serial NOT NULL, 
      nombre character varying(30) NOT NULL, 
      PRIMARY KEY (id), 
      UNIQUE (nombre)
     ) WITH ( OIDS = FALSE );
      INSERT INTO movimiento_concepto VALUES (1,'efectivo');
      ALTER TABLE detalle_caja_movimientos ADD COLUMN movimiento_concepto INTEGER NOT NULL DEFAULT 1;
      ALTER TABLE detalle_caja_movimientos ADD FOREIGN KEY (movimiento_concepto) REFERENCES movimiento_concepto (id) ON UPDATE NO ACTION ON DELETE NO ACTION;
2011/04/18
//DB
    CREATE TABLE detalle_acreditacion
    ALTER COLUMNS TYPE double precision to NUMERIC(12,3);
      ALTER TABLE caja_movimientos ALTER monto_apertura TYPE numeric(12,3);
      ALTER TABLE caja_movimientos ALTER monto_cierre TYPE numeric(12,3);
      ALTER TABLE ctacte_cliente ALTER entregado TYPE numeric(12,3);
      ALTER TABLE ctacte_cliente ALTER importe TYPE numeric(12,3);
      ALTER TABLE ctacte_proveedor ALTER entregado TYPE numeric(12,3);
      ALTER TABLE ctacte_proveedor ALTER importe TYPE numeric(12,3);
      ALTER TABLE detalle_acreditacion ALTER monto TYPE numeric(12,3);
      ALTER TABLE detalle_caja_movimientos ALTER monto TYPE numeric(12,3);
      ALTER TABLE detalle_compra ALTER precio_unitario TYPE numeric(12,3);
      ALTER TABLE detalle_lista_precios ALTER margen TYPE numeric(12,3);
      ALTER TABLE detalle_nota_credito ALTER precio_unitario TYPE numeric(12,3);
      ALTER TABLE detalle_presupuesto ALTER descuento TYPE numeric(12,3);
      ALTER TABLE detalle_presupuesto ALTER precio_unitario TYPE numeric(12,3);
      ALTER TABLE detalle_recibo ALTER monto_entrega TYPE numeric(12,3);
      ALTER TABLE detalle_remesa ALTER monto_entrega TYPE numeric(12,3);
      ALTER TABLE detalle_venta ALTER descuento TYPE numeric(12,3);
      ALTER TABLE detalle_venta ALTER precio_unitario TYPE numeric(12,3);
      ALTER TABLE factura_compra ALTER perc_iva TYPE numeric(12,3);
      ALTER TABLE factura_compra ALTER perc_dgr TYPE numeric(12,3);
      ALTER TABLE factura_compra ALTER importe TYPE numeric(12,3);
      ALTER TABLE factura_compra ALTER iva10 TYPE numeric(12,3);
      ALTER TABLE factura_compra ALTER iva21 TYPE numeric(12,3);
      ALTER TABLE factura_venta ALTER importe TYPE numeric(12,3);
      ALTER TABLE factura_venta ALTER descuento TYPE numeric(12,3);
      ALTER TABLE factura_venta ALTER iva10 TYPE numeric(12,3);
      ALTER TABLE factura_venta ALTER iva21 TYPE numeric(12,3);
      ALTER TABLE factura_venta ALTER gravado TYPE numeric(12,3);
      ALTER TABLE nota_credito ALTER importe TYPE numeric(12,3);
      ALTER TABLE nota_credito ALTER gravado TYPE numeric(12,3);
      ALTER TABLE nota_credito ALTER iva10 TYPE numeric(12,3);
      ALTER TABLE nota_credito ALTER iva21 TYPE numeric(12,3);
      ALTER TABLE nota_credito ALTER desacreditado TYPE numeric(12,3);
      ALTER TABLE presupuesto ALTER importe TYPE numeric(12,3);
      ALTER TABLE presupuesto ALTER descuento TYPE numeric(12,3);
      ALTER TABLE presupuesto ALTER iva10 TYPE numeric(12,3);
      ALTER TABLE presupuesto ALTER iva21 TYPE numeric(12,3);
      ALTER TABLE producto ALTER costo_compra TYPE numeric(12,3);
      ALTER TABLE producto ALTER precio_venta TYPE numeric(12,3);
      ALTER TABLE productos_web ALTER precio TYPE numeric(12,3);
      ALTER TABLE recibo ALTER monto TYPE numeric(12,3);
      ALTER TABLE remesa ALTER monto_entrega TYPE numeric(12,3);
2011/04/12
//DB
    ALTER TABLE remito ADD COLUMN fecha_remito date NOT NULL DEFAULT now();
    ALTER TABLE remito ALTER COLUMN fecha_remito DROP DEFAULT;
2011/04/05
//Added new feat!! "Nota de crédito"
//new Entity NotaCredito
//GUI ABM NotaCredito
//DB
    CREATE TABLE nota_credito
    CREATE TABLE detalle_nota_credito
//Report JGestion_NotaCredito


2011/02/17
//Edit GUI:
// Agregaron permisos correspondientes a ProdudosWeb y Oferas.
//DB
    ALTER TABLE permisos ADD COLUMN abm_catalogoweb boolean NOT NULL DEFAULT false;
    ALTER TABLE permisos ADD COLUMN abm_ofertasweb boolean NOT NULL DEFAULT false;
2011/02/14
//Edit GUI:
   - JDFacturaVenta // Detección de Productos en oferta
//DB
    ALTER TABLE detalle_venta ADD COLUMN oferta integer;
    ALTER TABLE detalle_venta ADD FOREIGN KEY (oferta) REFERENCES historial_ofertas (id) ON UPDATE NO ACTION ON DELETE NO ACTION;
2011/02/11
//DB Modif:
    CREATE TABLE historial_ofertas
2011/02/10
//Integrando con la Web
// Added GUI:
   - Ventana de asignación de productos al catálogo.
   - Ventana de creación de ofertas/destacados.
//Modif:
//   Class ListaPrecios, se le agregó el atributo paraCatalogoWeb.
    ALTER TABLE lista_precios ADD COLUMN para_catalogo_web BOOLEAN NOT NULL DEFAULT FALSE
2010/10/??
//DB
//verdura para carrito web
    CREATE ROLE jgestion_web LOGIN
    NOSUPERUSER NOINHERIT NOCREATEDB NOCREATEROLE CONNECTION LIMIT 10;
    CREATE TABLE productos_web (
      producto integer NOT NULL,
      precio numeric(12,2) NOT NULL,
      destacado boolean NOT NULL DEFAULT false,
      oferta boolean NOT NULL DEFAULT false,
      inicio_oferta date,
      fin_oferta date,
      estado smallint NOT NULL DEFAULT 1, -- 1 =nuevo, 2= modificado, 3= eliminado
      chequeado smallint NOT NULL DEFAULT 0, -- por la web page..
      id integer NOT NULL,
      CONSTRAINT productos_web_pkey PRIMARY KEY (id),
      CONSTRAINT fk_productos_web_producto FOREIGN KEY (producto)
          REFERENCES producto (id) MATCH SIMPLE
          ON UPDATE NO ACTION ON DELETE NO ACTION,
      CONSTRAINT productos_web_producto_fkey FOREIGN KEY (producto)
          REFERENCES producto (id) MATCH SIMPLE
          ON UPDATE NO ACTION ON DELETE NO ACTION,
      CONSTRAINT productos_web_producto_key UNIQUE (producto),
      CONSTRAINT unq_productos_web_0 UNIQUE (producto)
    )
    WITH (
      OIDS=FALSE
    );
    ALTER TABLE productos_web OWNER TO postgres;
    GRANT ALL ON TABLE productos_web TO postgres;
    GRANT SELECT, UPDATE ON TABLE productos_web TO jgestion_web;
    COMMENT ON COLUMN productos_web.estado IS '1 =nuevo, 2= modificado, 3= eliminado';
    COMMENT ON COLUMN productos_web.chequeado IS 'por la web page..';
2010/09/27
//Added GUI:
//   - Impl de los AutoCompleteComboBox (Facturas venta, compra y no se donde mas)
//   - Impl el Thread de checkeo de conexión con la DB (gui.JFP)
2010/09/13
//Added GUI:
       Menu > Productos > Movimientos
//Added Reporte: MovimientosProductos
2010/09/07
//implementación de anulación de FacturaCompra
ALTER TABLE detalle_remesa ADD COLUMN anulado boolean NOT NULL DEFAULT false;
2010/09/09
//para que esté == a detalles_compra
ALTER TABLE detalles_compra RENAME factura_compra  TO factura;
2010/09/07
//implementación de anulación de FacturaVenta
ALTER TABLE detalle_recibo ADD COLUMN anulado boolean NOT NULL DEFAULT false;
2010/07/13
//para relacionar una FacturaVenta con un Remito (OneToOne)
ALTER TABLE factura_venta ADD COLUMN remito integer;
ALTER TABLE factura_venta ADD FOREIGN KEY (remito) REFERENCES remito (id) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE remito ADD COLUMN factura_venta integer;
ALTER TABLE remito ADD FOREIGN KEY (factura_venta) REFERENCES factura_venta (id) ON UPDATE NO ACTION ON DELETE NO ACTION;
2010/07/08
 reporte Movimientos varios
 reporte Movimientos entre Cajas
2010/07/07
 modulo Presupuestos
 reporte Presupuestos
26-05
 ALTER TABLE datos_empresa ADD COLUMN fecha_inicio_actividad date;
-! impresión de listados VARIOS
-> resumenes de Cta cte (cliente y proveedor)
13-05
-> reporte Recibo A B C
11-05
-> Buscador y Reporte de Cierres de Caja (parcial y definitivo)

-> MovimientosVarios habilitado
add a new caja_movimiento.tipo = 8 (MovimientosVarios)
07-05