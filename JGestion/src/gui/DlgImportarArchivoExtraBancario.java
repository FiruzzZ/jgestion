package gui;

import controller.exceptions.MessageException;
import java.awt.Window;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.supercsv.io.CsvListReader;
import org.supercsv.prefs.CsvPreference;

/**
 *
 * @author FiruzzZ
 */
public class DlgImportarArchivoExtraBancario extends javax.swing.JDialog {

    private File file;
    private List<Object[]> data;
    private Integer fechaIndex = null;
    private Integer conceptoIndex = null;
    private Integer debitoIndex = null;
    private Integer creditoIndex = null;
    private Integer saldoIndex = null;

    /**
     * Creates new form DlgImportarArchivoExtraBancario
     */
    public DlgImportarArchivoExtraBancario(Window parent) {
        super(parent, ModalityType.APPLICATION_MODAL);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        tfColumnaFecha = new javax.swing.JTextField();
        tfColumnaConcepto = new javax.swing.JTextField();
        tfColumnaDebito = new javax.swing.JTextField();
        tfColumnaCredito = new javax.swing.JTextField();
        tfColumnaSaldo = new javax.swing.JTextField();
        tfExtractoFilePath = new javax.swing.JTextField();
        btnBuscarExtractoBancario = new javax.swing.JButton();
        cbTipoDeArchivo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        checkSkipFirstRow = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel6.setText("<html>Especifique el índice de las columnas en la que se encuentra cada información:<br>(Ingrese solo números, mayores a 0 y sin repetir)");

        tfColumnaFecha.setColumns(2);
        tfColumnaFecha.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfColumnaFecha.setText("1");

        tfColumnaConcepto.setColumns(2);
        tfColumnaConcepto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfColumnaConcepto.setText("4");

        tfColumnaDebito.setColumns(2);
        tfColumnaDebito.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfColumnaDebito.setText("5");

        tfColumnaCredito.setColumns(2);
        tfColumnaCredito.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfColumnaCredito.setText("6");

        tfColumnaSaldo.setColumns(2);
        tfColumnaSaldo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfColumnaSaldo.setText("7");

        tfExtractoFilePath.setEditable(false);
        tfExtractoFilePath.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        tfExtractoFilePath.setText("<Select File>");

        btnBuscarExtractoBancario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/appfinder.png"))); // NOI18N
        btnBuscarExtractoBancario.setText("Buscar archivo");
        btnBuscarExtractoBancario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarExtractoBancarioActionPerformed(evt);
            }
        });

        cbTipoDeArchivo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CSV separador por comas \",\"", "CSV separador por punto y comas \";\"", "Excel" }));

        jLabel5.setText("Tipo de archivo a importar");

        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24px_ok.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("resources"); // NOI18N
        btnAceptar.setText(bundle.getString("ok")); // NOI18N
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        jLabel1.setText("Fecha");

        jLabel2.setText("Concepto/Referencia");

        jLabel3.setText("Débito");

        jLabel4.setText("Crédito");

        jLabel7.setText("Saldo");

        jLabel8.setText("(columna opcional)");

        checkSkipFirstRow.setText("Saltear primera fila (la cual suele contene los nombres de las columnas).");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAceptar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfExtractoFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBuscarExtractoBancario))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbTipoDeArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkSkipFirstRow)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfColumnaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfColumnaDebito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfColumnaConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfColumnaCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(tfColumnaSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel8)))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfExtractoFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarExtractoBancario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbTipoDeArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfColumnaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfColumnaConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfColumnaDebito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfColumnaCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tfColumnaSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkSkipFirstRow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        try {
            if (file == null) {
                throw new MessageException("Archivo de exportación no seleccionado");
            }
            //<editor-fold defaultstate="collapsed" desc="control de índices ingresados">
            try {
                fechaIndex = Integer.valueOf(tfColumnaFecha.getText().trim());
                if (fechaIndex < 1) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException ex) {
                throw new MessageException("Índice de columnas fecha no válido");
            }
            try {
                conceptoIndex = Integer.valueOf(tfColumnaConcepto.getText().trim());
                if (conceptoIndex < 1) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException ex) {
                throw new MessageException("Índice de columnas concepto no válido");
            }

            try {
                debitoIndex = Integer.valueOf(tfColumnaDebito.getText().trim());
                if (debitoIndex < 1) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException ex) {
                throw new MessageException("Índice de columnas débito no válido");
            }
            try {
                creditoIndex = Integer.valueOf(tfColumnaCredito.getText().trim());
                if (creditoIndex < 1) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException ex) {
                throw new MessageException("Índice de columnas crédito no válido");
            }
            try {
                if (!tfColumnaSaldo.getText().trim().isEmpty()) {
                    saldoIndex = Integer.valueOf(tfColumnaSaldo.getText().trim());
                    if (saldoIndex < 1) {
                        throw new NumberFormatException();
                    }
                } else {
                    saldoIndex = -1;
                }
            } catch (NumberFormatException ex) {
                throw new MessageException("Índice de columnas saldo no válido");
            }
            if (fechaIndex == conceptoIndex || fechaIndex == debitoIndex || fechaIndex == creditoIndex || fechaIndex == saldoIndex || conceptoIndex == debitoIndex || conceptoIndex == creditoIndex || conceptoIndex == saldoIndex || debitoIndex == creditoIndex || debitoIndex == saldoIndex || creditoIndex == saldoIndex) {
                throw new MessageException("Los índices de las columnas deben ser todos distintos");
            }
            //</editor-fold>

            if (cbTipoDeArchivo.getSelectedIndex() == 2) {
                leerExcel();
            } else {
                leerCSV(cbTipoDeArchivo.getSelectedIndex() == 0 ? ',' : ';');
            }
            dispose();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar acceder al archivo de extracto bancario", "FileNotFoundException", JOptionPane.ERROR_MESSAGE);
        } catch (MessageException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.WARNING_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar acceder al archivo de extracto bancario", "IOException", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(DlgImportarArchivoExtraBancario.class.getName()).error(ex, ex);
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnBuscarExtractoBancarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarExtractoBancarioActionPerformed
        JFileChooser filec = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Extracto Bancario (xls, xlsx, csv, txt)", "xls", "xlsx", "csv", "txt");
        filec.setFileFilter(filter);
        filec.addChoosableFileFilter(filter);
        int val = filec.showOpenDialog(null);
        if (val == JFileChooser.APPROVE_OPTION) {
            file = filec.getSelectedFile();
            tfExtractoFilePath.setText(file.getName());
        }
    }//GEN-LAST:event_btnBuscarExtractoBancarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgImportarArchivoExtraBancario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgImportarArchivoExtraBancario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgImportarArchivoExtraBancario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgImportarArchivoExtraBancario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgImportarArchivoExtraBancario dialog = new DlgImportarArchivoExtraBancario(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnBuscarExtractoBancario;
    private javax.swing.JComboBox cbTipoDeArchivo;
    private javax.swing.JCheckBox checkSkipFirstRow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField tfColumnaConcepto;
    private javax.swing.JTextField tfColumnaCredito;
    private javax.swing.JTextField tfColumnaDebito;
    private javax.swing.JTextField tfColumnaFecha;
    private javax.swing.JTextField tfColumnaSaldo;
    private javax.swing.JTextField tfExtractoFilePath;
    // End of variables declaration//GEN-END:variables

    public List<Object[]> getImportedData() {
        return Collections.unmodifiableList(data);
    }

    private void leerExcel() throws FileNotFoundException, IOException, MessageException {
        try (FileInputStream fileInputStream = new FileInputStream(file)) {
            SimpleDateFormat sdf = null;
            int rowIndex = 0;
            data = new ArrayList<>(100);
            XSSFWorkbook workbook = new XSSFWorkbook(fileInputStream);
            //Get first sheet from the workbook
            XSSFSheet sheet = workbook.getSheetAt(0);
            //Get iterator to all the rows in current sheet
            Iterator<Row> rowIterator = sheet.iterator();
            boolean noFormatterNeeded = false;
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                //For each row, iterate through each columns
                Iterator<Cell> cellIterator = row.cellIterator();
                Date fecha;
                String concepto;
                BigDecimal debito, credito, saldo = null;
                rowIndex++;
                int columnIndex = 0;
                while (cellIterator.hasNext()) {
                    columnIndex++;
                    Cell cell = cellIterator.next();
                    if (columnIndex == fechaIndex) {
                        if (sdf == null && !noFormatterNeeded) {
                            try {
                                try {
                                    cell.getDateCellValue();
                                    noFormatterNeeded = true;
                                } catch (IllegalStateException e) {
                                    String ss = cell.getStringCellValue();
                                    sdf = determinateDateFormat(ss);
                                }
                            } catch (NumberFormatException | ParseException ex) {
                                throw new MessageException("No fue posible determinar el formato de la columna Fecha (índice " + fechaIndex + ")"
                                        + "\nSI NO ES un formato de fecha válido de Excel, debe tener alguno de los siguientes formato:"
                                        + "\n31/09/1999, 31-09-1999, 31 AGO 1999"
                                        + "\nEl caracter que separa días, meses y años debe ser: barra (/), guión (-) o un espacio");
                            }
                        }
                        try {
                            fecha = (sdf == null ? cell.getDateCellValue() : sdf.parse(cell.getStringCellValue()));
                        } catch (ParseException ex) {
                            throw new MessageException("Error intentando leer la columna fecha:\nFila=" + rowIndex);
                        }
                    }

                }
            }
        }
    }

    private void leerCSV(char separador) throws FileNotFoundException, MessageException, IOException {
        CsvListReader csv = new CsvListReader(new FileReader(file), separador == ',' ? CsvPreference.STANDARD_PREFERENCE : CsvPreference.EXCEL_NORTH_EUROPE_PREFERENCE);
        SimpleDateFormat sdf = null;
        int rowIndex = 0;
        data = new ArrayList<>(100);
        if (checkSkipFirstRow.isSelected()) {
            String[] header = csv.getHeader(checkSkipFirstRow.isSelected());
            System.out.println("Headers: " + Arrays.toString(header));
        }
        List<String> read = csv.read();
        while (read != null) {
            Date fecha;
            String concepto;
            BigDecimal debito, credito, saldo = null;
            rowIndex++;
            if (sdf == null) {
                try {
                    String ss = read.get(fechaIndex - 1).replaceAll(" ", "/").replaceAll("-", "/");
                    sdf = determinateDateFormat(ss);
                } catch (ParseException ex) {
                    throw new MessageException("No fue posible determinar el formato de la columna Fecha (índice " + fechaIndex + ")"
                            + "\nEsta debe tener alguno de los siguientes formato:"
                            + "\n31/09/1999, 31-09-1999, 31 AGO 1999"
                            + "\nEl caracter que separa días, meses y años debe ser: barra (/), guión (-) o un espacio");
                }
            }

            try {
                fecha = sdf.parse(read.get(fechaIndex - 1).replaceAll(" ", "/").replaceAll("-", "/"));
            } catch (ParseException ex) {
                throw new MessageException("Error intentando leer la columna fecha:\nFila=" + rowIndex + "\nvalor=" + read.get(fechaIndex - 1));
            }
            try {
                concepto = read.get(conceptoIndex - 1);
                debito = read.get(debitoIndex - 1) == null ? null : new BigDecimal(read.get(debitoIndex - 1).replaceAll(",", ""));
                credito = read.get(creditoIndex - 1) == null ? null : new BigDecimal(read.get(creditoIndex - 1).replaceAll(",", ""));
                if (saldoIndex != -1) {
                    saldo = new BigDecimal(read.get(saldoIndex - 1).replaceAll(",", ""));
                }
            } catch (IndexOutOfBoundsException ex) {
                Logger.getLogger(DlgImportarArchivoExtraBancario.class.getName()).error(ex, ex);
                throw new MessageException("Error intentando leer valores de la fila N° " + rowIndex
                        + "\nvalor=" + Arrays.toString(read.toArray())
                        + "\nEsto puede ser causado porque el formato del archivo no coincide con los parámetros especificados."
                        + "\nEj: Si el archivo tiene los valores separador por comas (,) y se seleccionó la opción punto y comas (;)");
            } catch (Exception ex) {
                Logger.getLogger(DlgImportarArchivoExtraBancario.class.getName()).error(ex, ex);
                throw new MessageException("Error intentando leer valores de la fila N° " + rowIndex
                        + "\nvalor=" + Arrays.toString(read.toArray()));
            }
            data.add(new Object[]{fecha, concepto, debito, credito, saldo});
            read = csv.read();
        }
    }

    private SimpleDateFormat determinateDateFormat(String date) throws ParseException {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdf.parse(date);
            return sdf;
        } catch (ParseException ex) {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
                sdf.parse(date);
                return sdf;
            } catch (ParseException exx) {
                throw exx;
            }
        }
    }
}
