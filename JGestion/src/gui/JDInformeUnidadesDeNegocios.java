package gui;

import controller.DAO;
import controller.UsuarioHelper;
import entity.Cuenta;
import entity.FacturaCompra;
import entity.FacturaVenta;
import entity.SubCuenta;
import entity.Sucursal;
import entity.UnidadDeNegocio;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Set;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import jgestion.ActionListenerManager;
import jgestion.JGestionUtils;
import jpa.controller.UnidadDeNegocioJpaController;
import utilities.general.UTIL;
import utilities.swing.components.ComboBoxWrapper;
import org.apache.log4j.Logger;
import utilities.swing.components.NumberRenderer;

/**
 *
 * @author FiruzzZ
 */
public class JDInformeUnidadesDeNegocios extends javax.swing.JDialog {

    private static final Logger LOG = Logger.getLogger(JDInformeUnidadesDeNegocios.class.getName());
    private String[] months = DateFormatSymbols.getInstance().getMonths();
    private SimpleDateFormat yyyyMMdd = new SimpleDateFormat("yyyy/MM/dd");
    private DefaultTableModel dtm;

    public JDInformeUnidadesDeNegocios(Window owner) {
        super(owner, ModalityType.MODELESS);
        initComponents();
        setLocationRelativeTo(owner);
//        ActionListenerManager.setUnidadDeNegocioSucursalActionListener(getCbUnidadDeNegocio(), true, getCbSucursal(), true, true);
        List<UnidadDeNegocio> all = new UnidadDeNegocioJpaController().findAll();
        UTIL.loadComboBox(cbUnidadDeNegocio, JGestionUtils.getWrappedUnidadDeNegocios(all), true);
        cbUnidadDeNegocio.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object o = cbUnidadDeNegocio.getSelectedItem();
                if (o instanceof ComboBoxWrapper) {
                    @SuppressWarnings("unchecked")
                    ComboBoxWrapper<UnidadDeNegocio> c = (ComboBoxWrapper<UnidadDeNegocio>) o;
                    Set<Sucursal> uni = c.getEntity().getSucursales();
                    List<Sucursal> x = new ArrayList<Sucursal>();
                    for (Sucursal sucursal : uni) {
                        x.add(sucursal);
                    }
                    UTIL.loadComboBox(cbSucursal, JGestionUtils.getWrappedSucursales(x), true);
                } else {
                    UTIL.loadComboBox(cbSucursal, null, true, "<Elegir Unidad de Negocios>");
                    cbSucursal.setSelectedIndex(0);
                }
            }
        });
        ActionListenerManager.setCuentaSubcuentaActionListener(getCbCuenta(), true, getCbSubCuenta(), true, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        cbSubCuenta = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        labelSucursal3 = new javax.swing.JLabel();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jYearChooser2 = new com.toedter.calendar.JYearChooser();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        jLabel1 = new javax.swing.JLabel();
        jMonthChooser2 = new com.toedter.calendar.JMonthChooser();
        labelSucursal1 = new javax.swing.JLabel();
        cbUnidadDeNegocio = new javax.swing.JComboBox();
        labelSucursal = new javax.swing.JLabel();
        cbSucursal = new javax.swing.JComboBox();
        labelSucursal2 = new javax.swing.JLabel();
        cbCuenta = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        bBuscar = new javax.swing.JButton();
        bImprimir = new javax.swing.JButton();
        btnToExcel = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Hasta");
        jLabel2.setEnabled(false);

        labelSucursal3.setText("SubCuenta");

        jMonthChooser1.setEnabled(false);

        jYearChooser2.setEnabled(false);

        jLabel1.setText("Desde");
        jLabel1.setEnabled(false);

        jMonthChooser2.setEnabled(false);

        labelSucursal1.setText("Unid. de Neg.");

        labelSucursal.setText("Sucursal");

        labelSucursal2.setText("Cuenta");

        jTable1.setModel(new javax.swing.table.DefaultTableModel());
        jScrollPane1.setViewportView(jTable1);

        bBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/lupa.png"))); // NOI18N
        bBuscar.setText("Buscar");
        bBuscar.setName("buscarBuscador"); // NOI18N
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });

        bImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/impresora.png"))); // NOI18N
        bImprimir.setText("Imprimir");
        bImprimir.setName("imprimirBuscador"); // NOI18N

        btnToExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/32px_excel.png"))); // NOI18N
        btnToExcel.setMnemonic('e');
        btnToExcel.setText("A Excel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1101, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelSucursal)
                            .addComponent(labelSucursal1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbUnidadDeNegocio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(labelSucursal3)
                            .addComponent(labelSucursal2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSubCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jMonthChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jYearChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bImprimir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnToExcel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelSucursal1)
                            .addComponent(cbUnidadDeNegocio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelSucursal2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(labelSucursal)
                            .addComponent(cbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jYearChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMonthChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSubCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelSucursal3)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnToExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        armarTabla();
        for (int month = 0; month < 12; month++) {
            BigDecimal importe = BigDecimal.ZERO;
            BigDecimal unknown = BigDecimal.ZERO;
            UnidadDeNegocio udn = null;
            List<FacturaVenta> lv = getFacturasVenta(month);
            for (FacturaVenta o : lv) {
                if (o.getUnidadDeNegocio() == null) {
                    unknown = unknown.add(BigDecimal.valueOf(o.getImporte()));
                    continue;
                }
                if (udn == null) {
                    udn = o.getUnidadDeNegocio();

                }
                if (udn.equals(o.getUnidadDeNegocio())) {
                    importe = importe.add(BigDecimal.valueOf(o.getImporte()));
                } else {
                    BigDecimal old = (BigDecimal) dtm.getValueAt(getRowOfUnidadDeNegocio(udn), month + 1);
                    dtm.setValueAt(importe.add(old), getRowOfUnidadDeNegocio(udn), month + 1);
                    udn = o.getUnidadDeNegocio();
                    importe = BigDecimal.valueOf(o.getImporte());
                }

            }
            BigDecimal old = (BigDecimal) dtm.getValueAt(dtm.getRowCount() - 1, month + 1);
            dtm.setValueAt(unknown.add(old), dtm.getRowCount() - 1, month + 1);
//            List<Object[]> lc = getFacturasCompra(month);
//            for (Object[] o : lc) {
//
//            }

        }
    }//GEN-LAST:event_bBuscarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBuscar;
    private javax.swing.JButton bImprimir;
    private javax.swing.JButton btnToExcel;
    private javax.swing.JComboBox cbCuenta;
    private javax.swing.JComboBox cbSubCuenta;
    private javax.swing.JComboBox cbSucursal;
    private javax.swing.JComboBox cbUnidadDeNegocio;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private com.toedter.calendar.JMonthChooser jMonthChooser2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private com.toedter.calendar.JYearChooser jYearChooser2;
    private javax.swing.JLabel labelSucursal;
    private javax.swing.JLabel labelSucursal1;
    private javax.swing.JLabel labelSucursal2;
    private javax.swing.JLabel labelSucursal3;
    // End of variables declaration//GEN-END:variables

    public JComboBox getCbCuenta() {
        return cbCuenta;
    }

    public JComboBox getCbSubCuenta() {
        return cbSubCuenta;
    }

    public JComboBox getCbSucursal() {
        return cbSucursal;
    }

    public JComboBox getCbUnidadDeNegocio() {
        return cbUnidadDeNegocio;
    }

    private void armarTabla() {
        String[] x = new String[13];
        x[0] = "Unidades";
        System.arraycopy(months, 0, x, 1, 12);
        UTIL.getDefaultTableModel(jTable1, x);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(2).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(3).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(4).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(5).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(6).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(7).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(8).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(9).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(10).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(11).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        jTable1.getColumnModel().getColumn(12).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        Object[] data = new Object[]{null, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO};
        if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
            data[0] = getCbUnidadDeNegocio().getSelectedItem();
            dtm.addRow(data);
        } else {
            for (int i = 1; i < getCbUnidadDeNegocio().getItemCount(); i++) {
                data[0] = getCbUnidadDeNegocio().getItemAt(i);
                dtm.addRow(data);
            }
        }
        data[0] = "Unknown";
        dtm.addRow(data);
    }

    @SuppressWarnings("unchecked")
    private List<FacturaVenta> getFacturasVenta(int month) {
        StringBuilder query = new StringBuilder("SELECT o FROM " + FacturaVenta.class.getSimpleName() + " o"
                + " WHERE o.anulada = FALSE");
        int year = jYearChooser1.getYear();
        Calendar c = GregorianCalendar.getInstance();
        c.set(year, month, 1);
        Date desde = c.getTime();
        c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date hasta = c.getTime();
        query.append(" AND o.fechaVenta >='").append(yyyyMMdd.format(desde)).append("'");
        query.append(" AND o.fechaVenta <='").append(yyyyMMdd.format(hasta)).append("'");
        if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
            query.append(" AND o.unidadDeNegocio.id = ").append(((ComboBoxWrapper<UnidadDeNegocio>) getCbUnidadDeNegocio().getSelectedItem()).getId());
        }
        if (getCbCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.cuenta.id = ").append(((ComboBoxWrapper<Cuenta>) getCbCuenta().getSelectedItem()).getId());
        }
        if (getCbSubCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.subCuenta.id = ").append(((ComboBoxWrapper<SubCuenta>) getCbSubCuenta().getSelectedItem()).getId());
        }
        if (getCbSucursal().getSelectedIndex() > 0) {
            query.append(" AND o.sucursal.id = ").append(((ComboBoxWrapper<Sucursal>) getCbSucursal().getSelectedItem()).getId());
        } else {
            if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
                query.append(" AND (");
                for (int i = 1; i < getCbSucursal().getItemCount(); i++) {
                    ComboBoxWrapper<Sucursal> cbw = (ComboBoxWrapper<Sucursal>) getCbSucursal().getItemAt(i);
                    query.append(" o.sucursal.id=").append(cbw.getId());
                    if ((i + 1) < getCbSucursal().getItemCount()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            } else {
                List<Sucursal> sucursales = new UsuarioHelper().getSucursales();
                query.append(" AND (");
                for (int i = 0; i < sucursales.size(); i++) {
                    query.append(" o.sucursal.id=").append(sucursales.get(i).getId());
                    if ((i + 1) < sucursales.size()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            }
        }
//        query.append(" ORDER BY o.unidadDeNegocio ");
        LOG.trace(query.toString());
        return DAO.getEntityManager().createQuery(query.toString()).getResultList();
    }

    @SuppressWarnings("unchecked")
    private List<Object[]> getFacturasCompra(int month) {
        StringBuilder query = new StringBuilder("SELECT o.fechaCompra, o.importe FROM " + FacturaCompra.class.getSimpleName() + " o"
                + " WHERE o.anulada = FALSE");
        int year = jYearChooser1.getYear();
        Date desde = UTIL.customDate(year, 0, 1);
        Date hasta = UTIL.customDate(year, 11, 31);
        query.append(" AND o.fechaCompra >='").append(yyyyMMdd.format(desde)).append("'");
        query.append(" AND o.fechaCompra <='").append(yyyyMMdd.format(hasta)).append("'");
        if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
            query.append(" AND o.unidadDeNegocio.id = ").append(((ComboBoxWrapper<UnidadDeNegocio>) getCbUnidadDeNegocio().getSelectedItem()).getId());
        }
        if (getCbCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.cuenta.id = ").append(((ComboBoxWrapper<Cuenta>) getCbCuenta().getSelectedItem()).getId());
        }
        if (getCbSubCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.subCuenta.id = ").append(((ComboBoxWrapper<SubCuenta>) getCbSubCuenta().getSelectedItem()).getId());
        }
        if (getCbSucursal().getSelectedIndex() > 0) {
            query.append(" AND o.sucursal.id = ").append(((ComboBoxWrapper<Sucursal>) getCbSucursal().getSelectedItem()).getId());
        } else {
            if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
                query.append(" AND (");
                for (int i = 1; i < getCbSucursal().getItemCount(); i++) {
                    ComboBoxWrapper<Sucursal> cbw = (ComboBoxWrapper<Sucursal>) getCbSucursal().getItemAt(i);
                    query.append(" o.sucursal.id=").append(cbw.getId());
                    if ((i + 1) < getCbSucursal().getItemCount()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            } else {
                List<Sucursal> sucursales = new UsuarioHelper().getSucursales();
                query.append(" AND (");
                for (int i = 0; i < sucursales.size(); i++) {
                    query.append(" o.sucursal.id=").append(sucursales.get(i).getId());
                    if ((i + 1) < sucursales.size()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            }
        }
        query.append(" ORDER BY o.fechaCompra ASC");
        LOG.trace(query.toString());
        return DAO.getEntityManager().createQuery(query.toString()).getResultList();
    }

    private int getRowOfUnidadDeNegocio(UnidadDeNegocio udn) {
        int rowIndex = dtm.getRowCount() - 1;
        if (udn != null) {
            for (int row = 0; row < dtm.getRowCount(); row++) {
                ComboBoxWrapper<?> u = (ComboBoxWrapper<?>) dtm.getValueAt(row, 0);
                if (u.getId().equals(udn.getId())) {
                    rowIndex = row;
                    break;
                }
            }
        }
        return rowIndex;
    }
}
