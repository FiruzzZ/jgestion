package gui;

import controller.CuentaController;
import controller.DAO;
import controller.DetalleCajaMovimientosController;
import controller.UsuarioHelper;
import entity.Cuenta;
import entity.DetalleCajaMovimientos;
import entity.FacturaCompra;
import entity.FacturaVenta;
import entity.SubCuenta;
import entity.Sucursal;
import entity.UnidadDeNegocio;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.JComboBox;
import jgestion.ActionListenerManager;
import jgestion.JGestionUtils;
import jpa.controller.UnidadDeNegocioJpaController;
import utilities.general.UTIL;
import utilities.swing.components.ComboBoxWrapper;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.treetable.AbstractTreeTableModel;
import utilities.swing.components.NumberRenderer;

/**
 *
 * @author FiruzzZ
 */
public class JDInformeUnidadesDeNegocios extends javax.swing.JDialog {

    private static final Logger LOG = Logger.getLogger(JDInformeUnidadesDeNegocios.class.getName());
    private final String[] columnNames = new String[13];
    private SimpleDateFormat yyyyMMdd = new SimpleDateFormat("yyyy/MM/dd");

    public JDInformeUnidadesDeNegocios(Window owner) {
        super(owner, ModalityType.MODELESS);
        String[] months = DateFormatSymbols.getInstance().getMonths();
        columnNames[0] = "Unidades";
        System.arraycopy(months, 0, columnNames, 1, 12);
        initComponents();
        setLocationRelativeTo(owner);
        List<UnidadDeNegocio> all = new UnidadDeNegocioJpaController().findAll();
        UTIL.loadComboBox(cbUnidadDeNegocio, JGestionUtils.getWrappedUnidadDeNegocios(all), true);
        cbUnidadDeNegocio.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object o = cbUnidadDeNegocio.getSelectedItem();
                if (o instanceof ComboBoxWrapper) {
                    @SuppressWarnings("unchecked")
                    ComboBoxWrapper<UnidadDeNegocio> c = (ComboBoxWrapper<UnidadDeNegocio>) o;
                    Set<Sucursal> uni = c.getEntity().getSucursales();
                    List<Sucursal> x = new ArrayList<Sucursal>();
                    for (Sucursal sucursal : uni) {
                        x.add(sucursal);
                    }
                    UTIL.loadComboBox(cbSucursal, JGestionUtils.getWrappedSucursales(x), true);
                } else {
                    UTIL.loadComboBox(cbSucursal, null, true, "<Elegir Unidad de Negocios>");
                    cbSucursal.setSelectedIndex(0);
                }
            }
        });
        ActionListenerManager.setCuentasIngresosSubcuentaActionListener(getCbCuenta(), true, getCbSubCuenta(), true, true);
        jTable1.setTreeTableModel(new CuentaTreeTableModel());
        jTable1.setRootVisible(true);
        for (int indexColumn = 1; indexColumn < jTable1.getColumnModel().getColumnCount(); indexColumn++) {
            jTable1.getColumnModel().getColumn(indexColumn).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        cbSubCuenta = new javax.swing.JComboBox();
        labelSucursal3 = new javax.swing.JLabel();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        labelSucursal1 = new javax.swing.JLabel();
        cbUnidadDeNegocio = new javax.swing.JComboBox();
        labelSucursal = new javax.swing.JLabel();
        cbSucursal = new javax.swing.JComboBox();
        labelSucursal2 = new javax.swing.JLabel();
        cbCuenta = new javax.swing.JComboBox();
        bBuscar = new javax.swing.JButton();
        bImprimir = new javax.swing.JButton();
        btnToExcel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new org.jdesktop.swingx.JXTreeTable();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelSucursal3.setText("SubCuenta");

        labelSucursal1.setText("Unid. de Neg.");

        labelSucursal.setText("Sucursal");

        labelSucursal2.setText("Cuenta");

        bBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/lupa.png"))); // NOI18N
        bBuscar.setText("Buscar");
        bBuscar.setName("buscarBuscador"); // NOI18N
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });

        bImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/impresora.png"))); // NOI18N
        bImprimir.setText("Imprimir");
        bImprimir.setEnabled(false);
        bImprimir.setName("imprimirBuscador"); // NOI18N

        btnToExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/32px_excel.png"))); // NOI18N
        btnToExcel.setMnemonic('e');
        btnToExcel.setText("A Excel");
        btnToExcel.setEnabled(false);

        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelSucursal)
                            .addComponent(labelSucursal1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbUnidadDeNegocio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(labelSucursal3)
                            .addComponent(labelSucursal2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbSubCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bImprimir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnToExcel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(labelSucursal1)
                            .addComponent(cbUnidadDeNegocio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelSucursal2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(labelSucursal)
                            .addComponent(cbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSubCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelSucursal3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnToExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        bBuscar.setEnabled(false);
        jTable1.setEnabled(false);
        new Thread(new Runnable() {
            @Override
            public void run() {
                CuentaNode root = (CuentaNode) jTable1.getTreeTableModel().getRoot();
                resetTabla();
                for (int month = 0; month < 12; month++) {
                    BigDecimal ingresosSinUNDniCuenta = BigDecimal.ZERO;
                    BigDecimal egresosSinUNDniCuenta = BigDecimal.ZERO;
                    List<FacturaVenta> fvList = getFacturasVenta(month);
                    for (FacturaVenta o : fvList) {
                        BigDecimal importe = BigDecimal.valueOf(o.getImporte());
                        if (o.getUnidadDeNegocio() == null && o.getCuenta() == null) {
                            ingresosSinUNDniCuenta = ingresosSinUNDniCuenta.add(importe);
                            continue;
                        }
                        for (CuentaNode udnNode : root.getChildren()) {
                            if (udnNode.getName().equalsIgnoreCase(o.getUnidadDeNegocio().getNombre())) {
                                CuentaNode ingresos = udnNode.getChildren().get(0);
                                if (o.getCuenta() != null) {
                                    for (CuentaNode cuentaNode : ingresos.getChildren()) {
                                        if (cuentaNode.getName().equalsIgnoreCase(o.getCuenta().getNombre())) {
                                            importe = cuentaNode.getPeriodos()[month].add(importe);
                                            cuentaNode.getPeriodos()[month] = importe;
                                            break;
                                        }
                                    }
                                } else {
                                    //Cuenta a Identificar
                                    importe = ingresos.getChildren().get(ingresos.getChildren().size() - 1).getPeriodos()[month].add(importe);
                                    ingresos.getChildren().get(ingresos.getChildren().size() - 1).getPeriodos()[month] = importe;
                                }
                                break;
                            }
                        }
                    }
                    List<DetalleCajaMovimientos> mviList = getMovimientosVariosIngresos(month);
                    for (DetalleCajaMovimientos o : mviList) {
                        BigDecimal importe = BigDecimal.valueOf(o.getMonto());
                        if (o.getUnidadDeNegocio() == null) {
                            ingresosSinUNDniCuenta = ingresosSinUNDniCuenta.add(importe);
                            continue;
                        }
                        for (CuentaNode udnNode : root.getChildren()) {
                            if (udnNode.getName().equalsIgnoreCase(o.getUnidadDeNegocio().getNombre())) {
                                CuentaNode ingresos = udnNode.getChildren().get(0);
                                if (o.getCuenta() != null) {
                                    for (CuentaNode cuentaNode : ingresos.getChildren()) {
                                        if (cuentaNode.getName().equalsIgnoreCase(o.getCuenta().getNombre())) {
                                            importe = cuentaNode.getPeriodos()[month].add(importe);
                                            cuentaNode.getPeriodos()[month] = importe;
                                            break;
                                        }
                                    }
                                } else {
                                    //Cuenta a Identificar
                                    importe = ingresos.getChildren().get(ingresos.getChildren().size() - 1).getPeriodos()[month].add(importe);
                                    ingresos.getChildren().get(ingresos.getChildren().size() - 1).getPeriodos()[month] = importe;
                                }
                                break;
                            }
                        }

                    }
                    root.getChildren().get(root.getChildren().size() - 1).getChildren().get(0).getPeriodos()[month] = ingresosSinUNDniCuenta;

                    List<FacturaCompra> fcList = getFacturasCompra(month);
                    for (FacturaCompra o : fcList) {
                        BigDecimal importe = BigDecimal.valueOf(-o.getImporte());
                        if (o.getUnidadDeNegocio() == null && o.getCuenta() == null) {
                            egresosSinUNDniCuenta = egresosSinUNDniCuenta.add(importe);
                            continue;
                        }
                        for (CuentaNode udnNode : root.getChildren()) {
                            if (udnNode.getName().equalsIgnoreCase(o.getUnidadDeNegocio().getNombre())) {
                                CuentaNode egresos = udnNode.getChildren().get(1);
                                if (o.getCuenta() != null) {
                                    for (CuentaNode cuentaNode : egresos.getChildren()) {
                                        if (cuentaNode.getName().equalsIgnoreCase(o.getCuenta().getNombre())) {
                                            importe = cuentaNode.getPeriodos()[month].add(importe);
                                            cuentaNode.getPeriodos()[month] = importe;
                                            break;
                                        }
                                    }
                                } else {
                                    //Cuenta a Identificar
                                    importe = egresos.getChildren().get(egresos.getChildren().size() - 1).getPeriodos()[month].add(importe);
                                    egresos.getChildren().get(egresos.getChildren().size() - 1).getPeriodos()[month] = importe;
                                }
                                break;
                            }
                        }
                    }
                    List<DetalleCajaMovimientos> mveList = getMovimientosVariosEgresos(month);
                    for (DetalleCajaMovimientos o : mveList) {
                        // LOS MV EGRESOS YA son Negativos!!!!!
                        BigDecimal importe = BigDecimal.valueOf(o.getMonto());
                        if (o.getUnidadDeNegocio() == null) {
                            egresosSinUNDniCuenta = egresosSinUNDniCuenta.add(importe);
                            continue;
                        }
                        for (CuentaNode udnNode : root.getChildren()) {
                            if (udnNode.getName().equalsIgnoreCase(o.getUnidadDeNegocio().getNombre())) {
                                CuentaNode egresos = udnNode.getChildren().get(1);
                                if (o.getCuenta() != null) {
                                    for (CuentaNode cuentaNode : egresos.getChildren()) {
                                        if (cuentaNode.getName().equalsIgnoreCase(o.getCuenta().getNombre())) {
                                            importe = cuentaNode.getPeriodos()[month].add(importe);
                                            cuentaNode.getPeriodos()[month] = importe;
                                            break;
                                        }
                                    }
                                } else {
                                    //Cuenta a Identificar
                                    importe = egresos.getChildren().get(egresos.getChildren().size() - 1).getPeriodos()[month].add(importe);
                                    egresos.getChildren().get(egresos.getChildren().size() - 1).getPeriodos()[month] = importe;
                                }
                                break;
                            }
                        }

                    }
                    root.getChildren().get(root.getChildren().size() - 1).getChildren().get(1).getPeriodos()[month] = egresosSinUNDniCuenta;
                }
                //<editor-fold defaultstate="collapsed" desc="Limpiando las que están en ZERO">
                for (CuentaNode udn : root.getChildren()) {
                    for (CuentaNode ingresos : udn.getChildren()) {
                        for (Iterator<CuentaNode> it = ingresos.getChildren().iterator(); it.hasNext();) {
                            CuentaNode cuenta = it.next();
                            if (cuenta.isEmpty()) {
                                it.remove();
                            }
                        }
                    }
                    for (CuentaNode egresos : udn.getChildren()) {
                        for (Iterator<CuentaNode> it = egresos.getChildren().iterator(); it.hasNext();) {
                            CuentaNode cuenta = it.next();
                            if (cuenta.isEmpty()) {
                                it.remove();
                            }
                        }
                    }
                }
                //</editor-fold>
                jTable1.setEnabled(true);
                bBuscar.setEnabled(true);
            }
        }).start();
    }//GEN-LAST:event_bBuscarActionPerformed
    @SuppressWarnings("unchecked")
    private List<DetalleCajaMovimientos> getMovimientosVariosIngresos(int month) {
        StringBuilder query = new StringBuilder("SELECT o FROM " + DetalleCajaMovimientos.class.getSimpleName() + " o"
                + " WHERE o.ingreso = TRUE AND o.tipo= " + DetalleCajaMovimientosController.MOVIMIENTO_VARIOS);
        int year = jYearChooser1.getYear();
        Calendar c = GregorianCalendar.getInstance();
        c.set(year, month, 1);
        Date desde = c.getTime();
        c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date hasta = c.getTime();
        query.append(" AND o.fechaMovimiento >='").append(yyyyMMdd.format(desde)).append("'");
        query.append(" AND o.fechaMovimiento <='").append(yyyyMMdd.format(hasta)).append("'");
        if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
            query.append(" AND o.unidadDeNegocio.id = ").append(((ComboBoxWrapper<UnidadDeNegocio>) getCbUnidadDeNegocio().getSelectedItem()).getId());
        }
        if (getCbCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.cuenta.id = ").append(((ComboBoxWrapper<Cuenta>) getCbCuenta().getSelectedItem()).getId());
        }
        if (getCbSubCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.subCuenta.id = ").append(((ComboBoxWrapper<SubCuenta>) getCbSubCuenta().getSelectedItem()).getId());
        }
        LOG.trace(query.toString());
        return DAO.getEntityManager().createQuery(query.toString()).getResultList();
    }

    @SuppressWarnings("unchecked")
    private List<FacturaCompra> getFacturasCompra(int month) {
        StringBuilder query = new StringBuilder("SELECT o FROM " + FacturaCompra.class.getSimpleName() + " o"
                + " WHERE o.anulada = FALSE");
        int year = jYearChooser1.getYear();
        Calendar c = GregorianCalendar.getInstance();
        c.set(year, month, 1);
        Date desde = c.getTime();
        c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date hasta = c.getTime();
        query.append(" AND o.fechaCompra >='").append(yyyyMMdd.format(desde)).append("'");
        query.append(" AND o.fechaCompra <='").append(yyyyMMdd.format(hasta)).append("'");
        if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
            query.append(" AND o.unidadDeNegocio.id = ").append(((ComboBoxWrapper<UnidadDeNegocio>) getCbUnidadDeNegocio().getSelectedItem()).getId());
        }
        if (getCbCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.cuenta.id = ").append(((ComboBoxWrapper<Cuenta>) getCbCuenta().getSelectedItem()).getId());
        }
        if (getCbSubCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.subCuenta.id = ").append(((ComboBoxWrapper<SubCuenta>) getCbSubCuenta().getSelectedItem()).getId());
        }
        if (getCbSucursal().getSelectedIndex() > 0) {
            query.append(" AND o.sucursal.id = ").append(((ComboBoxWrapper<Sucursal>) getCbSucursal().getSelectedItem()).getId());
        } else {
            if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
                query.append(" AND (");
                for (int i = 1; i < getCbSucursal().getItemCount(); i++) {
                    ComboBoxWrapper<Sucursal> cbw = (ComboBoxWrapper<Sucursal>) getCbSucursal().getItemAt(i);
                    query.append(" o.sucursal.id=").append(cbw.getId());
                    if ((i + 1) < getCbSucursal().getItemCount()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            } else {
                List<Sucursal> sucursales = new UsuarioHelper().getSucursales();
                query.append(" AND (");
                for (int i = 0; i < sucursales.size(); i++) {
                    query.append(" o.sucursal.id=").append(sucursales.get(i).getId());
                    if ((i + 1) < sucursales.size()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            }
        }
        System.out.println(query.toString());
        return DAO.getEntityManager().createQuery(query.toString()).getResultList();
    }

    @SuppressWarnings("unchecked")
    private List<FacturaVenta> getFacturasVenta(int month) {
        StringBuilder query = new StringBuilder("SELECT o FROM " + FacturaVenta.class.getSimpleName() + " o"
                + " WHERE o.anulada = FALSE");
        int year = jYearChooser1.getYear();
        Calendar c = GregorianCalendar.getInstance();
        c.set(year, month, 1);
        Date desde = c.getTime();
        c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date hasta = c.getTime();
        query.append(" AND o.fechaVenta >='").append(yyyyMMdd.format(desde)).append("'");
        query.append(" AND o.fechaVenta <='").append(yyyyMMdd.format(hasta)).append("'");
        if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
            query.append(" AND o.unidadDeNegocio.id = ").append(((ComboBoxWrapper<UnidadDeNegocio>) getCbUnidadDeNegocio().getSelectedItem()).getId());
        }
        if (getCbCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.cuenta.id = ").append(((ComboBoxWrapper<Cuenta>) getCbCuenta().getSelectedItem()).getId());
        }
        if (getCbSubCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.subCuenta.id = ").append(((ComboBoxWrapper<SubCuenta>) getCbSubCuenta().getSelectedItem()).getId());
        }
        if (getCbSucursal().getSelectedIndex() > 0) {
            query.append(" AND o.sucursal.id = ").append(((ComboBoxWrapper<Sucursal>) getCbSucursal().getSelectedItem()).getId());
        } else {
            if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
                query.append(" AND (");
                for (int i = 1; i < getCbSucursal().getItemCount(); i++) {
                    ComboBoxWrapper<Sucursal> cbw = (ComboBoxWrapper<Sucursal>) getCbSucursal().getItemAt(i);
                    query.append(" o.sucursal.id=").append(cbw.getId());
                    if ((i + 1) < getCbSucursal().getItemCount()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            } else {
                List<Sucursal> sucursales = new UsuarioHelper().getSucursales();
                query.append(" AND (");
                for (int i = 0; i < sucursales.size(); i++) {
                    query.append(" o.sucursal.id=").append(sucursales.get(i).getId());
                    if ((i + 1) < sucursales.size()) {
                        query.append(" OR ");
                    }
                }
                query.append(")");
            }
        }
        LOG.trace(query.toString());
        return DAO.getEntityManager().createQuery(query.toString()).getResultList();
    }

    @SuppressWarnings("unchecked")
    private List<DetalleCajaMovimientos> getMovimientosVariosEgresos(int month) {
        StringBuilder query = new StringBuilder("SELECT o FROM " + DetalleCajaMovimientos.class.getSimpleName() + " o"
                + " WHERE o.ingreso = FALSE AND o.tipo= " + DetalleCajaMovimientosController.MOVIMIENTO_VARIOS);
        int year = jYearChooser1.getYear();
        Calendar c = GregorianCalendar.getInstance();
        c.set(year, month, 1);
        Date desde = c.getTime();
        c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date hasta = c.getTime();
        query.append(" AND o.fechaMovimiento >='").append(yyyyMMdd.format(desde)).append("'");
        query.append(" AND o.fechaMovimiento <='").append(yyyyMMdd.format(hasta)).append("'");
        if (getCbUnidadDeNegocio().getSelectedIndex() > 0) {
            query.append(" AND o.unidadDeNegocio.id = ").append(((ComboBoxWrapper<UnidadDeNegocio>) getCbUnidadDeNegocio().getSelectedItem()).getId());
        }
        if (getCbCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.cuenta.id = ").append(((ComboBoxWrapper<Cuenta>) getCbCuenta().getSelectedItem()).getId());
        }
        if (getCbSubCuenta().getSelectedIndex() > 0) {
            query.append(" AND o.subCuenta.id = ").append(((ComboBoxWrapper<SubCuenta>) getCbSubCuenta().getSelectedItem()).getId());
        }
        System.out.println(query.toString());
        return DAO.getEntityManager().createQuery(query.toString()).getResultList();
    }

    private void resetTabla() {
        CuentaNode root = (CuentaNode) jTable1.getTreeTableModel().getRoot();
        for (CuentaNode udnNode : root.getChildren()) {
            for (CuentaNode ingresosEgresosNode : udnNode.getChildren()) {
                for (CuentaNode cuentaNode : ingresosEgresosNode.getChildren()) {
                    for (int i = 0; i < cuentaNode.getPeriodos().length; i++) {
                        cuentaNode.getPeriodos()[i] = BigDecimal.ZERO;
                    }
                }
                for (int i = 0; i < ingresosEgresosNode.getPeriodos().length; i++) {
                    ingresosEgresosNode.getPeriodos()[i] = BigDecimal.ZERO;
                }
            }
            for (int i = 0; i < udnNode.getPeriodos().length; i++) {
                udnNode.getPeriodos()[i] = BigDecimal.ZERO;
            }
        }
        for (int i = 0; i < root.getPeriodos().length; i++) {
            root.getPeriodos()[i] = BigDecimal.ZERO;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBuscar;
    private javax.swing.JButton bImprimir;
    private javax.swing.JButton btnToExcel;
    private javax.swing.JComboBox cbCuenta;
    private javax.swing.JComboBox cbSubCuenta;
    private javax.swing.JComboBox cbSucursal;
    private javax.swing.JComboBox cbUnidadDeNegocio;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTreeTable jTable1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JLabel labelSucursal;
    private javax.swing.JLabel labelSucursal1;
    private javax.swing.JLabel labelSucursal2;
    private javax.swing.JLabel labelSucursal3;
    // End of variables declaration//GEN-END:variables

    private class CuentaTreeTableModel extends AbstractTreeTableModel {

        private CuentaNode rootNode;

        CuentaTreeTableModel() {
            rootNode = new CuentaNode("Resultado Bruto", null);
            List<Cuenta> cuentas = new CuentaController().findAll();
            //obtener facturas filtradas...
            for (int i = 1; i < getCbUnidadDeNegocio().getItemCount(); i++) {
                @SuppressWarnings("unchecked")
                ComboBoxWrapper<UnidadDeNegocio> udn = (ComboBoxWrapper<UnidadDeNegocio>) getCbUnidadDeNegocio().getItemAt(i);
                CuentaNode udnNode = new CuentaNode(udn.getText(), null);

                CuentaNode ingresos = new CuentaNode("Ingresos", null);
                for (Cuenta cuenta : cuentas) {
                    ingresos.getChildren().add(new CuentaNode(cuenta.getNombre(), null));
                }
                ingresos.getChildren().add(new CuentaNode("Cuenta a Identificar", null));

                CuentaNode egresos = new CuentaNode("Egresos", null);
                for (Cuenta cuenta : cuentas) {
                    egresos.getChildren().add(new CuentaNode(cuenta.getNombre(), null));
                }
                egresos.getChildren().add(new CuentaNode("Cuenta a Identificar", null));

                udnNode.getChildren().add(ingresos);
                udnNode.getChildren().add(egresos);
                rootNode.getChildren().add(udnNode);
            }
            CuentaNode udnAIdentificar = new CuentaNode("A Identificar", null);
            udnAIdentificar.getChildren().add(new CuentaNode("Ingresos a Identificar", null));
            udnAIdentificar.getChildren().add(new CuentaNode("Egresos a Identificar", null));
            rootNode.getChildren().add(udnAIdentificar);
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(Object node, int column) {
            CuentaNode treenode = (CuentaNode) node;
            switch (column) {
                case 0:
                    return treenode.getName();
                default: {
                    if (isLeaf(node)) {
                        return treenode.getPeriodos()[column - 1];
                    }
                    if (!rootNode.equals(node)) {
                        BigDecimal subTotal = BigDecimal.ZERO;
                        for (CuentaNode posibleUDN : treenode.getChildren()) {
                            if (isLeaf(posibleUDN)) {
                                //es cuenta... o UDN Ingresos/Egresos a identificar
                                subTotal = subTotal.add(posibleUDN.getPeriodos()[column - 1]);

                            } else {
                                //si no es LEAF, tiene 2 hijos y no son LEAF tampoco, estás en una UDN
                                if (posibleUDN.getChildren().size() == 2 && !isLeaf(posibleUDN.getChildren().get(0))) {
                                    CuentaNode ingresos = posibleUDN.getChildren().get(0);
                                    for (CuentaNode ingresoCuentaNode : ingresos.getChildren()) {
                                        subTotal = subTotal.add(ingresoCuentaNode.getPeriodos()[column - 1]);

                                    }
                                    CuentaNode egresos = posibleUDN.getChildren().get(1);
                                    for (CuentaNode egresoCuentaNode : egresos.getChildren()) {
                                        subTotal = subTotal.add(egresoCuentaNode.getPeriodos()[column - 1]);

                                    }
                                } else {
                                    //Ingresos o Egresos
                                    for (CuentaNode ingresosOegresosNode : posibleUDN.getChildren()) {
                                        subTotal = subTotal.add(ingresosOegresosNode.getPeriodos()[column - 1]);
                                    }
                                }
                            }
                        }
                        return subTotal;
                    } else {
                        //ROOT!
                        BigDecimal resultadoBruto = BigDecimal.ZERO;
                        for (CuentaNode udnNode : treenode.getChildren()) {
                            //udn a identificar
                            if (udnNode.getChildren().size() == 2 && isLeaf(udnNode.getChildren().get(0)) && isLeaf(udnNode.getChildren().get(1))) {
                                //ingresos a identificar
                                resultadoBruto = resultadoBruto.add(udnNode.getChildren().get(0).getPeriodos()[column - 1]);
                                //egresos a identificar
                                resultadoBruto = resultadoBruto.add(udnNode.getChildren().get(1).getPeriodos()[column - 1]);
                            } else {
                                CuentaNode ingresos = udnNode.getChildren().get(0);
                                for (CuentaNode cuentaNode : ingresos.getChildren()) {
                                    resultadoBruto = resultadoBruto.add(cuentaNode.getPeriodos()[column - 1]);
                                }
                                CuentaNode egresos = udnNode.getChildren().get(1);
                                for (CuentaNode cuentaNode : egresos.getChildren()) {
                                    resultadoBruto = resultadoBruto.add(cuentaNode.getPeriodos()[column - 1]);
                                }
                            }
                        }
                        return resultadoBruto;
                    }
                }
            }
        }

        @Override
        public Object getChild(Object node, int index) {
            CuentaNode treenode = (CuentaNode) node;
            return treenode.getChildren().get(index);
        }

        @Override
        public int getChildCount(Object parent) {
            CuentaNode treenode = (CuentaNode) parent;
            return treenode.getChildren().size();
        }

        @Override
        public int getIndexOfChild(Object parent, Object child) {
            CuentaNode treenode = (CuentaNode) parent;
            for (int i = 0; i > treenode.getChildren().size(); i++) {
                if (treenode.getChildren().get(i) == child) {
                    return i;
                }
            }

            return 0;
        }

        @Override
        public Object getRoot() {
            return rootNode;
        }

        @Override
        public boolean isLeaf(Object node) {
            CuentaNode treenode = (CuentaNode) node;
            return treenode.getChildren().isEmpty();
        }
    }

    private class CuentaNode {

        private String name;
        private BigDecimal[] periodos;
        private List<CuentaNode> children = new ArrayList<CuentaNode>();

        CuentaNode(String nombre, BigDecimal[] periodos) {
            this.name = nombre;
            this.periodos = periodos;
            if (periodos == null) {
                this.periodos = new BigDecimal[]{BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO};
            }
        }

        public String getName() {
            return name;
        }

        public BigDecimal[] getPeriodos() {
            return periodos;
        }

        public List<CuentaNode> getChildren() {
            return children;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 37 * hash + (this.name != null ? this.name.hashCode() : 0);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final CuentaNode other = (CuentaNode) obj;
            if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
                return false;
            }
            return true;
        }

        @Override
        public String toString() {
            return "CuentaNode{" + "name=" + name + '}';
        }

        public boolean isEmpty() {
            for (BigDecimal importe : periodos) {
                if (!importe.equals(BigDecimal.ZERO)) {
                    return false;
                }
            }
            return true;
        }
    }

    public JComboBox getCbCuenta() {
        return cbCuenta;
    }

    public JComboBox getCbSubCuenta() {
        return cbSubCuenta;
    }

    public JComboBox getCbSucursal() {
        return cbSucursal;
    }

    public JComboBox getCbUnidadDeNegocio() {
        return cbUnidadDeNegocio;
    }
}
