/*
 * JDOfertas.java
 *
 * Created on 04/01/2011, 08:57:01
 */
package gui;

import controller.Contabilidad;
import controller.DAO;
import controller.FacturaVentaController;
import controller.HistorialOfertasJpaController;
import controller.ListaPreciosController;
import controller.ProductoController;
import controller.ProductosWebJpaController;
import controller.exceptions.MessageException;
import controller.exceptions.NonexistentEntityException;
import controller.exceptions.PreexistingEntityException;
import entity.HistorialOfertas;
import entity.ListaPrecios;
import entity.Producto;
import entity.ProductosWeb;
import utilities.general.UTIL;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import javax.persistence.NonUniqueResultException;
import javax.swing.JOptionPane;
import jpa.controller.ProductoJpaController;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.Priority;

/**
 *
 * @author FiruzzZ
 */
public class JDOfertas extends javax.swing.JDialog {

    private final ProductoController productoCtrller;
    private final ProductosWebJpaController productosWebCtrller;
    private final HistorialOfertasJpaController historialOfertasCtrller;
    private Producto selectedProducto;
    private ListaPrecios listaPreciosParaCatalogo;

    /**
     * Creates new form JDOfertas
     *
     * @throws MessageException Si no hay una
     * {@link ListaPrecios#paraCatalogoWeb} == TRUE
     */
    public JDOfertas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        listaPreciosParaCatalogo = new ListaPreciosController().findListaPreciosParaCatalogo();
        initComponents();
        setLocationRelativeTo(parent);
        productosWebCtrller = new ProductosWebJpaController();
        productoCtrller = new ProductoController();
        historialOfertasCtrller = new HistorialOfertasJpaController();

        UTIL.loadComboBox(cbProductos, new ProductoController().findProductoToCombo(), Boolean.FALSE);
        tfListaPreciosCatalogo.setText(listaPreciosParaCatalogo.getNombre());
        cargarTablaOfertas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel4 = new javax.swing.JLabel();
      labelCodigoNoRegistrado = new javax.swing.JLabel();
      labelCodigoNoRegistrado.setVisible(false);
      jScrollPane1 = new javax.swing.JScrollPane();
      jTable1 = new javax.swing.JTable();
      tfProductoIVA = new javax.swing.JTextField();
      tfProductoCodigo = new javax.swing.JTextField();
      jLabel5 = new javax.swing.JLabel();
      btnActualizarCatalogo = new javax.swing.JButton();
      jLabel16 = new javax.swing.JLabel();
      tfCostoCompra = new javax.swing.JTextField();
      jLabel7 = new javax.swing.JLabel();
      tfSubRubro = new javax.swing.JTextField();
      jLabel6 = new javax.swing.JLabel();
      tfRubro = new javax.swing.JTextField();
      jPanel2 = new javax.swing.JPanel();
      jLabel19 = new javax.swing.JLabel();
      tfPrecioOferta = new javax.swing.JTextField();
      jLabel21 = new javax.swing.JLabel();
      dcDesde = new com.toedter.calendar.JDateChooser();
      jLabel20 = new javax.swing.JLabel();
      dcHasta = new com.toedter.calendar.JDateChooser();
      tfOfertaDesc = new javax.swing.JTextField();
      jLabel18 = new javax.swing.JLabel();
      cbOfertaTipoMargen = new javax.swing.JComboBox();
      checkDescatado = new javax.swing.JCheckBox();
      btnAgregar = new javax.swing.JButton();
      jLabel8 = new javax.swing.JLabel();
      jLabel9 = new javax.swing.JLabel();
      tfPrecioVentaActual = new javax.swing.JTextField();
      tfListaPreciosCatalogo = new javax.swing.JTextField();
      btnModificarProducto = new javax.swing.JButton();
      cbProductos = new javax.swing.JComboBox();
      jLabel1 = new javax.swing.JLabel();
      jLabel17 = new javax.swing.JLabel();
      tfPrecioVenta = new javax.swing.JTextField();
      jPanel1 = new javax.swing.JPanel();
      labelFoto = new javax.swing.JLabel();
      btnQuitar = new javax.swing.JButton();
      jLabel12 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jScrollPane2 = new javax.swing.JScrollPane();
      jEditorPane1 = new javax.swing.JEditorPane();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Administración: Ofertas");
      setResizable(false);

      jLabel4.setText("Código");

      labelCodigoNoRegistrado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
      labelCodigoNoRegistrado.setForeground(new java.awt.Color(255, 51, 0));
      labelCodigoNoRegistrado.setText("¡CÓDIGO NO REGISTRADO!");

      jTable1.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "Producto", "Precio", "Destacado", "Desde", "Hasta"
         }
      ) {
         Class[] types = new Class [] {
            java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
         };
         boolean[] canEdit = new boolean [] {
            false, false, false, false, false
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      jTable1.setFocusable(false);
      jTable1.setRequestFocusEnabled(false);
      jTable1.getTableHeader().setReorderingAllowed(false);
      jScrollPane1.setViewportView(jTable1);
      jTable1.getColumnModel().getColumn(0).setPreferredWidth(300);
      jTable1.getColumnModel().getColumn(1).setPreferredWidth(40);
      jTable1.getColumnModel().getColumn(2).setResizable(false);
      jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
      jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
      jTable1.getColumnModel().getColumn(4).setPreferredWidth(50);

      tfProductoIVA.setEditable(false);
      tfProductoIVA.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      tfProductoIVA.setToolTipText("margen de ganancia del producto");
      tfProductoIVA.setFocusable(false);
      tfProductoIVA.setName("tfmargen"); // NOI18N
      tfProductoIVA.setRequestFocusEnabled(false);

      tfProductoCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            tfProductoCodigoFocusGained(evt);
         }
      });
      tfProductoCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            tfProductoCodigoKeyReleased(evt);
         }
      });

      jLabel5.setText("Rubro");

      btnActualizarCatalogo.setText("Actualizar Página Web");
      btnActualizarCatalogo.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnActualizarCatalogoActionPerformed(evt);
         }
      });

      jLabel16.setText("Precio venta");

      tfCostoCompra.setColumns(4);
      tfCostoCompra.setEditable(false);
      tfCostoCompra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      tfCostoCompra.setFocusable(false);
      tfCostoCompra.setRequestFocusEnabled(false);

      jLabel7.setText("Descripción");

      tfSubRubro.setEditable(false);
      tfSubRubro.setFocusable(false);
      tfSubRubro.setRequestFocusEnabled(false);

      jLabel6.setText("Sub Rubro");

      tfRubro.setEditable(false);
      tfRubro.setFocusable(false);
      tfRubro.setRequestFocusEnabled(false);

      jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos de Oferta o Descatado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

      jLabel19.setText("Desde");

      tfPrecioOferta.setColumns(4);
      tfPrecioOferta.setEditable(false);
      tfPrecioOferta.setFont(new java.awt.Font("Tahoma", 1, 12));
      tfPrecioOferta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      tfPrecioOferta.setText("0.00");
      tfPrecioOferta.setToolTipText("{[(Precio venta actual + ganancia según listaPrecios) - descuento] + IVA}");
      tfPrecioOferta.setName("tfprecio"); // NOI18N
      tfPrecioOferta.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyTyped(java.awt.event.KeyEvent evt) {
            tfPrecioOfertaKeyTyped(evt);
         }
      });

      jLabel21.setText("Precio oferta");

      dcDesde.setDate(new Date());

      jLabel20.setText("Hasta");

      tfOfertaDesc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      tfOfertaDesc.setToolTipText("margen de ganancia del producto");
      tfOfertaDesc.setName("tfmargen"); // NOI18N
      tfOfertaDesc.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            tfOfertaDescFocusGained(evt);
         }
      });
      tfOfertaDesc.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            tfOfertaDescKeyReleased(evt);
         }
      });

      jLabel18.setText("Desc. de oferta");

      cbOfertaTipoMargen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "%", "$" }));
      cbOfertaTipoMargen.setToolTipText("<html>Margen aplicado al precio\n<br>% - Porcentual\n<br>$  - Monto fijo \n</html>");
      cbOfertaTipoMargen.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cbOfertaTipoMargenActionPerformed(evt);
         }
      });

      checkDescatado.setFont(new java.awt.Font("Tahoma", 1, 11));
      checkDescatado.setText("Destacado");

      btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16px_add.png"))); // NOI18N
      btnAgregar.setMnemonic('a');
      btnAgregar.setText("Agregar oferta");
      btnAgregar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAgregarActionPerformed(evt);
         }
      });

      jLabel8.setText("Lista Precios");

      jLabel9.setText("Precio venta actual");

      tfPrecioVentaActual.setColumns(4);
      tfPrecioVentaActual.setEditable(false);
      tfPrecioVentaActual.setFont(new java.awt.Font("Tahoma", 1, 11));
      tfPrecioVentaActual.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      tfPrecioVentaActual.setText("0.00");
      tfPrecioVentaActual.setToolTipText("Precio venta + Margen + IVA + ListaPrecios");
      tfPrecioVentaActual.setFocusable(false);
      tfPrecioVentaActual.setName("tfprecio"); // NOI18N
      tfPrecioVentaActual.setRequestFocusEnabled(false);

      tfListaPreciosCatalogo.setEditable(false);

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jLabel18)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(cbOfertaTipoMargen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(tfOfertaDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel21)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(tfPrecioOferta, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap())
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jLabel19)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(dcDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(14, 14, 14)
                  .addComponent(jLabel20)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(dcHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(checkDescatado)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                  .addComponent(btnAgregar))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jLabel8)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(tfListaPreciosCatalogo, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel9)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(tfPrecioVentaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap(186, Short.MAX_VALUE))))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel8)
               .addComponent(tfPrecioVentaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(tfListaPreciosCatalogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel9))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel18)
               .addComponent(cbOfertaTipoMargen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(tfOfertaDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(tfPrecioOferta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel21))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
               .addComponent(jLabel19)
               .addComponent(jLabel20)
               .addComponent(dcHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(dcDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(btnAgregar)
               .addComponent(checkDescatado)))
      );

      btnModificarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16px_white_page_edit.png"))); // NOI18N
      btnModificarProducto.setMnemonic('m');
      btnModificarProducto.setText("Modificar Producto");
      btnModificarProducto.setEnabled(false);
      btnModificarProducto.setFocusable(false);
      btnModificarProducto.setRequestFocusEnabled(false);
      btnModificarProducto.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnModificarProductoActionPerformed(evt);
         }
      });

      cbProductos.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            cbProductosFocusLost(evt);
         }
      });
      cbProductos.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            cbProductosKeyReleased(evt);
         }
      });

      jLabel1.setText("Producto");

      jLabel17.setText("Costo compra");

      tfPrecioVenta.setColumns(4);
      tfPrecioVenta.setEditable(false);
      tfPrecioVenta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      tfPrecioVenta.setText("0.00");
      tfPrecioVenta.setFocusable(false);
      tfPrecioVenta.setName("tfprecio"); // NOI18N
      tfPrecioVenta.setRequestFocusEnabled(false);
      tfPrecioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyTyped(java.awt.event.KeyEvent evt) {
            tfPrecioVentaKeyTyped(evt);
         }
      });

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      labelFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      labelFoto.setText("[ Sin imagen ]");
      labelFoto.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(labelFoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(labelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/remove_16x.png"))); // NOI18N
      btnQuitar.setMnemonic('q');
      btnQuitar.setText("Quitar Oferta/Destacado");
      btnQuitar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnQuitarActionPerformed(evt);
         }
      });

      jLabel12.setText("IVA %");

      jLabel2.setText("Lista de Productos en Destacados y en Oferta");

      jEditorPane1.setContentType("text/html");
      jEditorPane1.setEditable(false);
      jEditorPane1.setFocusable(false);
      jEditorPane1.setRequestFocusEnabled(false);
      jScrollPane2.setViewportView(jEditorPane1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addComponent(btnQuitar)
                  .addGap(403, 403, 403)
                  .addComponent(btnActualizarCatalogo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(4, 4, 4))
               .addComponent(jLabel2)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jLabel7)
                     .addComponent(jLabel1)
                     .addComponent(jLabel17)
                     .addComponent(jLabel5)
                     .addComponent(jLabel4))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(tfProductoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelCodigoNoRegistrado))
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(tfRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSubRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(tfCostoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfProductoIVA, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addComponent(cbProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(btnModificarProducto)
                     .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(tfProductoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel4)
                  .addComponent(labelCodigoNoRegistrado))
               .addComponent(btnModificarProducto, javax.swing.GroupLayout.Alignment.TRAILING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(cbProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel1))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel5)
                     .addComponent(tfRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel6)
                     .addComponent(tfSubRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel17)
                     .addComponent(tfCostoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(tfPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(tfProductoIVA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel16)
                     .addComponent(jLabel12))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel7)))
               .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(16, 16, 16)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(23, 23, 23)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnActualizarCatalogo)
               .addComponent(btnQuitar))
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void tfPrecioOfertaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPrecioOfertaKeyTyped
        // TODO add your handling code here:
}//GEN-LAST:event_tfPrecioOfertaKeyTyped

    private void tfPrecioVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPrecioVentaKeyTyped
}//GEN-LAST:event_tfPrecioVentaKeyTyped

    private void cbProductosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbProductosKeyReleased
        if (evt.getKeyCode() == 10) {
            setProducto((Producto) cbProductos.getSelectedItem());
            tfOfertaDesc.requestFocus();
        }
    }//GEN-LAST:event_cbProductosKeyReleased

    private void cbProductosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbProductosFocusLost
        try {
            setProducto((Producto) cbProductos.getSelectedItem());
        } catch (ClassCastException e) {
            System.out.println("no era producto");
        } catch (NullPointerException e) {
            System.out.println("terrible null...");
        }
    }//GEN-LAST:event_cbProductosFocusLost

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            guardarOferta();
            limpiarFields();
            cargarTablaOfertas();
        } catch (SQLException ex) {
            Logger.getLogger(JDOfertas.class.getName()).log(Level.ERROR, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR", ex.getMessage(), 0);
        } catch (MessageException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (PreexistingEntityException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Preexistencia", 0);
        } catch (NonexistentEntityException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Inexistencia", 0);
        } catch (Exception ex) {
            Logger.getLogger(JDOfertas.class.getName()).log(Level.ERROR, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR CRÍTICO", 0);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tfProductoCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfProductoCodigoKeyReleased
        String codigo = tfProductoCodigo.getText().trim();
        if (evt.getKeyCode() == 10 && codigo.length() > 0) {
            //busca en el combo si existe un Producto con este código
            for (int i = 0; i < cbProductos.getItemCount(); i++) {
                if (((Producto) cbProductos.getItemAt(i)).getCodigo().equals(codigo)) {
                    labelCodigoNoRegistrado.setVisible(false);
                    cbProductos.setSelectedIndex(i);
                    setProducto((Producto) cbProductos.getSelectedItem());
                    tfOfertaDesc.requestFocus();
                    return;
                }
            }
            //indica que no se encontró el código insertado
            btnModificarProducto.setEnabled(Boolean.FALSE);
            limpiarFields();
            labelCodigoNoRegistrado.setForeground(new java.awt.Color(255, 51, 0));
            labelCodigoNoRegistrado.setText("¡CÓDIGO NO REGISTRADO!");
            labelCodigoNoRegistrado.setVisible(true);
        }
    }//GEN-LAST:event_tfProductoCodigoKeyReleased

    private void tfOfertaDescKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfOfertaDescKeyReleased
        calcularPrecioOferta();
    }//GEN-LAST:event_tfOfertaDescKeyReleased

    private void tfProductoCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfProductoCodigoFocusGained
        tfProductoCodigo.setSelectionStart(0);
    }//GEN-LAST:event_tfProductoCodigoFocusGained

    private void tfOfertaDescFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfOfertaDescFocusGained
        tfOfertaDesc.setSelectionStart(0);
    }//GEN-LAST:event_tfOfertaDescFocusGained

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        Producto producto = (Producto) UTIL.getSelectedValue(jTable1, 0);
        producto = new ProductoJpaController().find(producto.getId());
        if (producto != null) {
            try {
                quitarOferta(producto);
                historialOfertasCtrller.disableOfertaVigente(producto);
                cargarTablaOfertas();
            } catch (NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(this, "No existe mas el Producto que intenta modificar", "Error", 2);
                Logger.getLogger(JDOfertas.class).log(Level.ERROR, ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Algo salió mal....Culpa de Carlos"
                        + "\n" + ex.getMessage(), "Error", 2);
                Logger.getLogger(JDOfertas.class).log(Level.ERROR, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione el producto en Oferta/Destacado que desea quitar", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void cbOfertaTipoMargenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOfertaTipoMargenActionPerformed
        calcularPrecioOferta();
    }//GEN-LAST:event_cbOfertaTipoMargenActionPerformed

    private void btnActualizarCatalogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarCatalogoActionPerformed
        btnActualizarCatalogo.setEnabled(false);
        try {
            String data = ProductosWebJpaController.UPDATE_CATALOGOWEB();
            JOptionPane.showMessageDialog(this, data);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error en el módulo de actualización web", 0);
            org.apache.log4j.Logger.getLogger(JDCatalogoWEB.class).log(org.apache.log4j.Level.ERROR, e);
        } finally {
            btnActualizarCatalogo.setEnabled(true);
        }
    }//GEN-LAST:event_btnActualizarCatalogoActionPerformed

    private void btnModificarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarProductoActionPerformed
        try {
            productoCtrller.initABM(selectedProducto);
            UTIL.loadComboBox(cbProductos, productoCtrller.findProductoToCombo(), false);
            setProducto(selectedProducto);
            UTIL.setSelectedItem(cbProductos, selectedProducto);
        } catch (Exception ex) {
            Logger.getLogger(JDOfertas.class).log(Level.ERROR, null, ex);
        }
    }//GEN-LAST:event_btnModificarProductoActionPerformed
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnActualizarCatalogo;
   private javax.swing.JButton btnAgregar;
   private javax.swing.JButton btnModificarProducto;
   private javax.swing.JButton btnQuitar;
   private javax.swing.JComboBox cbOfertaTipoMargen;
   private javax.swing.JComboBox cbProductos;
   private javax.swing.JCheckBox checkDescatado;
   private com.toedter.calendar.JDateChooser dcDesde;
   private com.toedter.calendar.JDateChooser dcHasta;
   private javax.swing.JEditorPane jEditorPane1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel18;
   private javax.swing.JLabel jLabel19;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel20;
   private javax.swing.JLabel jLabel21;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTable jTable1;
   private javax.swing.JLabel labelCodigoNoRegistrado;
   private javax.swing.JLabel labelFoto;
   private javax.swing.JTextField tfCostoCompra;
   private javax.swing.JTextField tfListaPreciosCatalogo;
   private javax.swing.JTextField tfOfertaDesc;
   private javax.swing.JTextField tfPrecioOferta;
   private javax.swing.JTextField tfPrecioVenta;
   private javax.swing.JTextField tfPrecioVentaActual;
   private javax.swing.JTextField tfProductoCodigo;
   private javax.swing.JTextField tfProductoIVA;
   private javax.swing.JTextField tfRubro;
   private javax.swing.JTextField tfSubRubro;
   // End of variables declaration//GEN-END:variables

    private void cargarTablaOfertas() {
        UTIL.limpiarDtm(jTable1);
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        List<ProductosWeb> list = productosWebCtrller.findProductosWebEnOferta();
        for (ProductosWeb productosWeb : list) {
            dtm.addRow(new Object[]{
                        productosWeb.getProducto(),
                        UTIL.PRECIO_CON_PUNTO.format(productosWeb.getPrecio()),
                        productosWeb.getDestacado(),
                        UTIL.DATE_FORMAT.format(productosWeb.getInicioOferta()),
                        UTIL.DATE_FORMAT.format(productosWeb.getFinOferta())
                    });
        }
    }

    /**
     * Setea los fields según el Producto, si producto == null limpia
     *
     * @param producto
     */
    private void setProducto(Producto producto) {
        if (producto != null) {
            btnModificarProducto.setEnabled(Boolean.TRUE);
            selectedProducto = (Producto) DAO.findEntity(Producto.class, producto.getId());
            tfProductoCodigo.setText(selectedProducto.getCodigo());
            tfRubro.setText(selectedProducto.getRubro().getNombre());
            tfSubRubro.setText(selectedProducto.getSubrubro() != null ? selectedProducto.getSubrubro().getNombre() : "");
            tfCostoCompra.setText(selectedProducto.getCostoCompra().toString());
            tfProductoIVA.setText(selectedProducto.getIva().getIva().toString());
            tfPrecioVenta.setText(selectedProducto.getPrecioVenta().toString());
            if (selectedProducto.getDescripcion() != null) {
                jEditorPane1.setText(selectedProducto.getDescripcion());
            } else {
                jEditorPane1.setText("[ Producto sin Descripción ]");
            }
            if (selectedProducto.getFoto() != null && selectedProducto.getFoto().length > 0) {
                try {
                    UTIL.setImageAsIconLabel(labelFoto, selectedProducto.getFoto());
                } catch (IOException ex) {
                    labelFoto.setText("[ IOException!! ]");
                    Logger.getLogger(JDOfertas.class.getName()).log(Level.ERROR, null, ex);
                }
            } else {
                labelFoto.setIcon(null);
                labelFoto.setText("[ Sin imagen ]");
            }
            tfPrecioVentaActual.setText(UTIL.PRECIO_CON_PUNTO.format(getPrecioFinalOferta()));
            if (productosWebCtrller.isInCatalogoWeb(selectedProducto)) {
                labelCodigoNoRegistrado.setForeground(new java.awt.Color(255, 115, 0));
                labelCodigoNoRegistrado.setText("EN CATÁLOGO WEB");
                labelCodigoNoRegistrado.setVisible(Boolean.TRUE);
            } else {
                labelCodigoNoRegistrado.setVisible(Boolean.FALSE);
            }
        } else {
            btnModificarProducto.setEnabled(Boolean.FALSE);
            limpiarFields();
        }
    }

    private void guardarOferta() throws MessageException, PreexistingEntityException, NonexistentEntityException, Exception {
        Double precioOferta;
        Date iniOferta, finOferta;
        // <editor-fold defaultstate="collapsed" desc="controles">
        if (selectedProducto == null) {
            throw new MessageException("No ha seleccionado ningún Producto.");
        }
        if (selectedProducto.getSubrubro() == null) {
            throw new MessageException("El producto debe tener Sub Rubro.");
        }
        if (selectedProducto.getFoto() == null) {
            throw new MessageException("El producto debe tener una imagen.");
        }
        if (tfOfertaDesc.getText().length() < 1) {
            throw new MessageException("Debe especificar un Precio de oferta.");
        }
        try {
            precioOferta = Double.valueOf(tfPrecioOferta.getText());
            if (precioOferta < 0) {
                throw new MessageException("El precio de oferta no puede ser menor a cero.");
            }
        } catch (NumberFormatException ex) {
            throw new MessageException("Precio de oferta mal formado.");
        } catch (NullPointerException ex) {
            throw new MessageException("Precio de oferta no válido.");
        }
        iniOferta = dcDesde.getDate();
        if (iniOferta == null) {
            throw new MessageException("Debe espeficicar una fecha de inicio de oferta");
        }
        finOferta = dcHasta.getDate();
        if (finOferta == null) {
            throw new MessageException("Debe espeficicar una fecha de fin de oferta");
        }
        if (iniOferta.after(finOferta)
                || finOferta.before(iniOferta)) {
            throw new MessageException("Período de duración de oferta no válido");
        }// </editor-fold>

        //Check if this Producto already exist
        ProductosWeb oldProductosWeb = productosWebCtrller.findProductosWeb(selectedProducto.getId());
        //Si existe el producto en la tabla
        if (oldProductosWeb != null) {
            //Si el producto en la tabla está en oferta o destacado..
            if (oldProductosWeb.getDestacado() || oldProductosWeb.getOferta()) {
                int showOptionDialog = JOptionPane.showOptionDialog(this,
                        "El producto: " + selectedProducto.getNombre()
                        + " (" + selectedProducto.getCodigo() + ") ya se encuentra como "
                        + (oldProductosWeb.getDestacado() ? "Destacado" : "Oferta"),
                        "¿Desea reemplazar la actual?",
                        JOptionPane.YES_NO_OPTION, 2, null, null, null);
                if (JOptionPane.YES_OPTION != showOptionDialog) {
                    return;
                }
            }
            if (oldProductosWeb.getChequeado() == 1) {
                if (oldProductosWeb.getEstado() == ProductosWeb.ALTA
                        || oldProductosWeb.getEstado() == ProductosWeb.MODIFICADO) {
                    oldProductosWeb.setEstado(ProductosWeb.MODIFICADO);
                } else {
                    oldProductosWeb.setEstado(ProductosWeb.ALTA);
                }
            }
        } else {
            //insertando un producto que !E como oferta o destacado..
            oldProductosWeb = new ProductosWeb();
            oldProductosWeb.setProducto(selectedProducto);
            oldProductosWeb.setEstado(ProductosWeb.ALTA);
        }
        oldProductosWeb.setPrecio(precioOferta);
        oldProductosWeb.setDestacado(checkDescatado.isSelected());
        oldProductosWeb.setOferta(!checkDescatado.isSelected());
        oldProductosWeb.setInicioOferta(iniOferta);
        oldProductosWeb.setFinOferta(finOferta);
        oldProductosWeb.setChequeado((short) 0);

        if (oldProductosWeb.getId() == null) {
            oldProductosWeb.setId(selectedProducto.getId());
            productosWebCtrller.create(oldProductosWeb);
        } else {
            productosWebCtrller.edit(oldProductosWeb);
        }
        try {
            historialOfertasCtrller.disableOfertaVigente(oldProductosWeb.getProducto());
            addHistorialOfertas(oldProductosWeb);
        } catch (NonUniqueResultException ex) {
            throw new MessageException("Error de consistencia en la base de datos:"
                    + "\nHay mas de una oferta vigente del Producto"
                    + "\nNombre:" + oldProductosWeb.getProducto().getNombre()
                    + "\nCodigo:" + oldProductosWeb.getProducto().getCodigo());
        }
    }

    private void limpiarFields() {
        selectedProducto = null;
//      tfProductoCodigo.setText(null);
        tfRubro.setText(null);
        tfSubRubro.setText(null);
        tfProductoIVA.setText(null);
        tfCostoCompra.setText(null);
        tfPrecioVenta.setText(null);
        labelFoto.setIcon(null);
        selectedProducto = null;
        tfPrecioOferta.setText(null);
        checkDescatado.setSelected(false);
    }

    /**
     * Quita la oferta sobre el Producto y actualiza el precio de venta.
     *
     * @param producto
     * @throws NonexistentEntityException
     * @throws Exception
     */
    private void quitarOferta(Producto producto) throws NonexistentEntityException, Exception {
        ProductosWeb productosWeb = productosWebCtrller.findProductosWebByProducto(producto);
        if (productosWeb.getChequeado() == 1 || ProductosWeb.BAJA == productosWeb.getEstado()) {
            if (productosWeb.getEstado() == ProductosWeb.ALTA || productosWeb.getEstado() == ProductosWeb.MODIFICADO) {
                productosWeb.setEstado((short) 2);
            } else {
                productosWeb.setEstado((short) 1);
            }
        }
        productosWeb.setChequeado((short) 0);
        productosWeb.setInicioOferta(null);
        productosWeb.setFinOferta(null);
        productosWeb.setOferta(false);
        productosWeb.setDestacado(false);
        ListaPrecios listaPrecios = new ListaPreciosController().findListaPreciosParaCatalogo();
        Double precioFinal = producto.getPrecioVenta().doubleValue() + Contabilidad.GET_MARGEN_SEGUN_LISTAPRECIOS(listaPrecios, producto, null);
        Double iva = UTIL.getPorcentaje(precioFinal, producto.getIva().getIva());
        //seteando precio de venta ACTUAL
        productosWeb.setPrecio(new Double(UTIL.PRECIO_CON_PUNTO.format(precioFinal + iva)));
        productosWebCtrller.edit(productosWeb);
    }

    /**
     * {[(Precio venta actual + ganancia según listaPrecios) - descuento] + IVA}
     */
    private void calcularPrecioOferta() {
        try {
            if (tfOfertaDesc.getText().trim().length() > 0) {
                Double precioVentaActual = Double.valueOf(tfPrecioVenta.getText());
                precioVentaActual += Contabilidad.GET_MARGEN_SEGUN_LISTAPRECIOS(listaPreciosParaCatalogo, selectedProducto, precioVentaActual);
                Double precioOferta;
                if (cbOfertaTipoMargen.getSelectedIndex() == 0) {
                    Double descuento = UTIL.getPorcentaje(precioVentaActual, Double.valueOf(tfOfertaDesc.getText()));
                    precioOferta = (precioVentaActual - descuento);
                } else {
                    precioOferta = precioVentaActual - Double.valueOf(tfOfertaDesc.getText());
                }
                precioOferta += UTIL.getPorcentaje(precioOferta, selectedProducto.getIva().getIva());
                tfPrecioOferta.setText(UTIL.PRECIO_CON_PUNTO.format(precioOferta));
            } else {
                tfPrecioOferta.setText(null);
            }
        } catch (NumberFormatException e) {
            tfPrecioOferta.setText("Mal formato");
        }
    }

    private Double getPrecioFinalOferta() {
        Double precioFinal = selectedProducto.getPrecioVenta().doubleValue()
                + Contabilidad.GET_MARGEN_SEGUN_LISTAPRECIOS(listaPreciosParaCatalogo, selectedProducto, null);
        Double iva = UTIL.getPorcentaje(precioFinal, selectedProducto.getIva().getIva());
        return precioFinal + iva;
    }

    /**
     * Agrega la nueva oferta vigente del producto al Histórico de ofertas.
     *
     * @see JDOfertas#disableOfertaVigente(entity.Producto)
     * @param productosWeb
     */
    private void addHistorialOfertas(ProductosWeb productosWeb) {
        HistorialOfertas historialOfertas = new HistorialOfertas();
        historialOfertas.setDestacado(productosWeb.getDestacado());
        historialOfertas.setInicioOferta(productosWeb.getInicioOferta());
        historialOfertas.setFinOferta(productosWeb.getFinOferta());
        historialOfertas.setPrecio(productosWeb.getPrecio());
        historialOfertas.setProducto(productosWeb.getProducto());
        historialOfertas.setVigente(Boolean.TRUE);
        historialOfertasCtrller.create(historialOfertas);
    }
}
